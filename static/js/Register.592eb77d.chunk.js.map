{"version":3,"file":"static/js/Register.592eb77d.chunk.js","mappings":"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","sources":["webpack://client/./src/pages/Register/Register.module.css?12fc","pages/Register/Register.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Register_error__banC6\",\"forgotPassword\":\"Register_forgotPassword__8x5ne\",\"LoginInner\":\"Register_LoginInner__amRQp\",\"title\":\"Register_title__4r11G\",\"label\":\"Register_label__KQhFe\",\"input\":\"Register_input__d+3tu\",\"password\":\"Register_password__f0DeO\",\"loginContainer\":\"Register_loginContainer__3uSzf\",\"register\":\"Register_register__H6uKZ\"};","import s from './Register.module.css'\nimport {useNavigate} from 'react-router-dom';\nimport {userApi} from \"../../services\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Container from \"../../components/Container\";\nimport openEye from \"../../img/register/openEye.svg\";\nimport closeEye from \"../../img/register/closeEye.svg\";\nimport {SubmitButton} from \"../../Button\";\nimport {useState} from \"react\";\n\ntoast.configure()\n\nconst Register = () => {\n    const navigate = useNavigate();\n\n    const initialValues = {\n        login:'',\n        password:'',\n        confirmPassword:''\n    }\n\n    const validationSchema = Yup.object().shape({\n        login: Yup.string().min(2).required(\"Required\"),\n        password: Yup\n            .string()\n            .required('Please Enter your password')\n            .matches(\n                /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n                \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n            ),\n        confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    })\n\n    const onSubmit = async (values, onSubmitProps) => {\n        try{\n           const response = await userApi.userRegister({\n               login: values.login,\n               password: values.password\n           });\n            toast.success('Registration success',{\n                position:'top-center'\n            });\n            onSubmitProps.resetForm();\n            navigate('/login');\n        }catch (e) {\n            toast.error(e.message, {\n                position:'top-center'\n            })\n        }\n    }\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const showPas = () => {\n        setShowPassword(!showPassword);\n    };\n\n    const formik = useFormik({\n        initialValues,\n        validationSchema,\n        onSubmit,\n        validateOnMount:false\n    })\n    return(<Container>\n        <div className={s.loginContainer}>\n       <form onSubmit={formik.handleSubmit} className={s.formStyle}>\n               <div className={s.LoginInner}>\n                   <h1 className={s.title}>Register form</h1>\n                   <label htmlFor=\"login\" className={s.label}>\n                       Register\n                   </label>\n                   <input\n                       className={s.input}\n                       id=\"login\"\n                       name=\"login\"\n                       type=\"text\"\n                       placeholder='Login'\n                       {...formik.getFieldProps(\"login\")}\n                   />\n                   {formik.touched.login && formik.errors.login ? (\n                       <p className={s.error}>{formik.errors.login}</p>\n                   ) : null}\n\n                   <label htmlFor=\"password\" className={s.label}>\n                       Password\n                   </label>\n                   <div className={s.password}>\n                       <input\n                           className={s.input}\n                           id=\"password\"\n                           name=\"password\"\n                           type={showPassword ? \"text\" : \"password\"}\n                           placeholder='Password'\n                           {...formik.getFieldProps(\"password\")}\n                       />\n                       {showPassword ? (\n                           <img\n                               src={openEye}\n                               style={{ width: \"16px\", cursor: \"pointer\" }}\n                               onClick={showPas}\n                           />\n                       ) : (\n                           <img\n                               src={closeEye}\n                               style={{ width: \"16px\", cursor: \"pointer\" }}\n                               onClick={showPas}\n                           />\n                       )}\n                   </div>\n                   {formik.touched.password && formik.errors.password ? (\n                       <p className={s.error}>{formik.errors.password}</p>\n                   ) : null}\n\n                   <label htmlFor=\"confirmPassword\" className={s.label}>\n                       Confirm password\n                   </label>\n                   <div className={s.password}>\n                       <input\n                           className={s.input}\n                           id=\"confirmPassword\"\n                           name=\"confirmPassword\"\n                           type={showPassword ? \"text\" : \"password\"}\n                           placeholder='Confirm password'\n                           {...formik.getFieldProps(\"confirmPassword\")}\n                       />\n                       {showPassword ? (\n                           <img\n                               src={openEye}\n                               style={{ width: \"16px\", cursor: \"pointer\" }}\n                               onClick={showPas}\n                           />\n                       ) : (\n                           <img\n                               src={closeEye}\n                               style={{ width: \"16px\", cursor: \"pointer\" }}\n                               onClick={showPas}\n                           />\n                       )}\n                   </div>\n                   {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\n                       <p className={s.error}>{formik.errors.confirmPassword}</p>\n                   ) : null}\n               </div>\n               <SubmitButton\n                   text='Finish register'\n                   disabled={!(formik.dirty && formik.isValid)}\n                   className=\"submitButton\"\n               />\n           </form>\n        </div>\n    </Container>)\n}\n\nexport default Register;"],"names":["toast","navigate","useNavigate","validationSchema","Yup","shape","login","min","required","password","matches","confirmPassword","oneOf","onSubmit","values","onSubmitProps","userApi","position","resetForm","message","useState","showPassword","setShowPassword","showPas","formik","useFormik","initialValues","validateOnMount","Container","className","s","handleSubmit","htmlFor","id","name","type","placeholder","getFieldProps","touched","errors","src","openEye","style","width","cursor","onClick","closeEye","text","disabled","dirty","isValid"],"sourceRoot":""}