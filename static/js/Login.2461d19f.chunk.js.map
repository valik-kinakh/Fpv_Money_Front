{"version":3,"file":"static/js/Login.2461d19f.chunk.js","mappings":"sMACA,EAAwB,qBAAxB,EAA6D,6BAA7D,EAAsJ,0BAAtJ,EAAwL,qBAAxL,EAAqN,qBAArN,EAAkP,qBAAlP,EAAkR,wBAAlR,EAAqT,wBAArT,EAA8V,8B,oJCe9VA,EAAAA,GAAAA,YAEA,IAqHA,EArHc,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,gBAAiBC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cACzC,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAOXC,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,MAAOF,EAAAA,KAAaG,IAAI,GAAGC,SAAS,YACpCC,SAAUL,EAAAA,KAAaI,SAAS,cAGpC,GAAwCV,EAAAA,EAAAA,WAAS,GAAjD,eAAOY,EAAP,KAAqBC,EAArB,KAEMC,EAAU,WACZD,GAAiBD,IAGfG,EAAQ,mCAAG,WAAOC,EAAQC,GAAf,uFAETf,GAAW,GAFF,SAGcgB,EAAAA,GAAAA,UAAkBF,GAHhC,OAGHG,EAHG,OAITtB,EAAgBsB,GAChBC,aAAaC,QAAQ,cAAeC,KAAKC,UAAUJ,IACnDvB,EAAAA,GAAAA,QAAc,gBAAiB,CAC3B4B,SAAU,eAEdtB,GAAW,GACXe,EAAcQ,YACdtB,EAAS,KAXA,kDAaTD,GAAW,GACXN,EAAAA,GAAAA,MAAY,KAAEuB,SAASO,KAAKC,QAAS,CACjCH,SAAU,eAfL,0DAAH,wDAoBRI,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cArCkB,CAClBtB,MAAO,GACPG,SAAU,IAoCVN,iBAAAA,EACAU,SAAAA,IAGJ,OACI,SAACgB,EAAA,EAAD,WACI,iBAAKC,UAAWC,EAAhB,WACI,kBAAMlB,SAAUa,EAAOM,aAAvB,WACI,iBAAKF,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,yBACA,kBAAOE,QAAQ,QAAQH,UAAWC,EAAlC,oBAGA,0BACID,UAAWC,EACXG,GAAG,QACHC,KAAK,QACLC,KAAK,OACLC,YAAY,SACRX,EAAOY,cAAc,WAE5BZ,EAAOa,QAAQjC,OAASoB,EAAOc,OAAOlC,OACnC,cAAGwB,UAAWC,EAAd,SAAwBL,EAAOc,OAAOlC,QACtC,MAEJ,kBAAO2B,QAAQ,WAAWH,UAAWC,EAArC,uBAGA,iBAAKD,UAAWC,EAAhB,WACI,0BACID,UAAWC,EACXG,GAAG,WACHC,KAAK,WACLC,KAAM1B,EAAe,OAAS,WAC9B2B,YAAY,YACRX,EAAOY,cAAc,cAE5B5B,GACG,gBACI+B,IAAKC,EAAAA,EACLC,MAAO,CAACC,MAAO,OAAQC,OAAQ,WAC/BC,QAASlC,KAGb,gBACI6B,IAAKM,EAAAA,EACLJ,MAAO,CAACC,MAAO,OAAQC,OAAQ,WAC/BC,QAASlC,OAIpBc,EAAOa,QAAQ9B,UAAYiB,EAAOc,OAAO/B,UACtC,cAAGqB,UAAWC,EAAd,SAAwBL,EAAOc,OAAO/B,WACtC,QAGJV,GAAU,gBAAK+B,UAAWC,EAAhB,UACN,SAAC,IAAD,CAAQK,KAAK,UAAUY,MAAM,UAAUC,OAAQ,GAAIL,MAAO,QACrD,SAAC,KAAD,CACLM,KAAK,SACLC,WAAYzB,EAAO0B,OAAS1B,EAAO2B,SACnCvB,UAAU,oBAKlBlC,IAAc,SAAC,KAAD,CAAqBsD,KAAK,SAASC,UAAU,EAAOL,QAASjD,KAE/E,SAAC,KAAD,CAAMyD,GAAIC,EAAAA,EAAAA,SAAiBzB,UAAWC,EAAtC","sources":["webpack://client/./src/pages/Login/Login.module.css?b420","pages/Login/Login.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Login_error__SdyqE\",\"loaderWrapper\":\"Login_loaderWrapper__hgS64\",\"forgotPassword\":\"Login_forgotPassword__EsYpZ\",\"LoginInner\":\"Login_LoginInner__eQLxi\",\"title\":\"Login_title__SJ0Uv\",\"label\":\"Login_label__MvF1C\",\"input\":\"Login_input__6Emyd\",\"password\":\"Login_password__9rDlC\",\"register\":\"Login_register__SrZHL\",\"loginContainer\":\"Login_loginContainer__xABI1\"};","import s from './Login.module.css';\nimport {Link, useNavigate} from 'react-router-dom';\nimport {userApi} from \"../../services\";\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Container from \"../../components/Container\";\n\nimport closeEye from \"../../img/register/closeEye.svg\";\nimport openEye from \"../../img/register/openEye.svg\";\nimport React, {useState} from \"react\";\nimport {SubmitButton, UploadContentButton} from \"../../Button\";\nimport routes from \"../../config/routes\";\nimport Loader from \"react-loader-spinner\";\n\ntoast.configure();\n\nconst Login = ({getTokenHandler, isLoggedIn, logoutHandler}) => {\n    const [loading, setLoading] = useState(false);\n    const navigate = useNavigate();\n\n    const initialValues = {\n        login: '',\n        password: ''\n    }\n\n    const validationSchema = Yup.object().shape({\n        login: Yup.string().min(2).required(\"Required\"),\n        password: Yup.string().required(\"Required\"),\n    })\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const showPas = () => {\n        setShowPassword(!showPassword);\n    };\n\n    const onSubmit = async (values, onSubmitProps) => {\n        try {\n            setLoading(true);\n            const response = await userApi.userLogin(values)\n            getTokenHandler(response)\n            localStorage.setItem('currentUser', JSON.stringify(response));\n            toast.success('Login success', {\n                position: 'top-center'\n            });\n            setLoading(false);\n            onSubmitProps.resetForm();\n            navigate('/')\n        } catch (e) {\n            setLoading(false);\n            toast.error(e.response.data.message, {\n                position: 'top-center'\n            })\n        }\n    }\n\n    const formik = useFormik({\n        initialValues,\n        validationSchema,\n        onSubmit\n    })\n\n    return (\n        <Container>\n            <div className={s.loginContainer}>\n                <form onSubmit={formik.handleSubmit}>\n                    <div className={s.LoginInner}>\n                        <h1 className={s.title}>Login form</h1>\n                        <label htmlFor=\"login\" className={s.label}>\n                            Login\n                        </label>\n                        <input\n                            className={s.input}\n                            id=\"login\"\n                            name=\"login\"\n                            type=\"text\"\n                            placeholder='Login'\n                            {...formik.getFieldProps(\"login\")}\n                        />\n                        {formik.touched.login && formik.errors.login ? (\n                            <p className={s.error}>{formik.errors.login}</p>\n                        ) : null}\n\n                        <label htmlFor=\"password\" className={s.label}>\n                            Password\n                        </label>\n                        <div className={s.password}>\n                            <input\n                                className={s.input}\n                                id=\"password\"\n                                name=\"password\"\n                                type={showPassword ? \"text\" : \"password\"}\n                                placeholder='Password'\n                                {...formik.getFieldProps(\"password\")}\n                            />\n                            {showPassword ? (\n                                <img\n                                    src={openEye}\n                                    style={{width: \"16px\", cursor: \"pointer\"}}\n                                    onClick={showPas}\n                                />\n                            ) : (\n                                <img\n                                    src={closeEye}\n                                    style={{width: \"16px\", cursor: \"pointer\"}}\n                                    onClick={showPas}\n                                />\n                            )}\n                        </div>\n                        {formik.touched.password && formik.errors.password ? (\n                            <p className={s.error}>{formik.errors.password}</p>\n                        ) : null}\n                    </div>\n                    {\n                        loading ? <div className={s.loaderWrapper}>\n                            <Loader type=\"Circles\" color=\"#ff8614\" height={40} width={40} />\n                        </div> : <SubmitButton\n                            text='Log in'\n                            disabled={!(formik.dirty && formik.isValid)}\n                            className=\"submitButton\"\n                        />\n                    }\n                </form>\n                {\n                    isLoggedIn && <UploadContentButton text='Logout' disabled={false} onClick={logoutHandler}/>\n                }\n                <Link to={routes.register} className={s.register}>\n                    Go to register\n                </Link>\n            </div>\n        </Container>)\n}\n\nexport default Login;"],"names":["toast","getTokenHandler","isLoggedIn","logoutHandler","useState","loading","setLoading","navigate","useNavigate","validationSchema","Yup","shape","login","min","required","password","showPassword","setShowPassword","showPas","onSubmit","values","onSubmitProps","userApi","response","localStorage","setItem","JSON","stringify","position","resetForm","data","message","formik","useFormik","initialValues","Container","className","s","handleSubmit","htmlFor","id","name","type","placeholder","getFieldProps","touched","errors","src","openEye","style","width","cursor","onClick","closeEye","color","height","text","disabled","dirty","isValid","to","routes"],"sourceRoot":""}